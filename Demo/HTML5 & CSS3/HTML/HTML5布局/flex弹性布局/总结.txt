display:flex
这个是弹性布局必须要的属性，让竖的变横
弹性布局之所以功能强大灵活，是因为它打破了很多原有的规则。
可以将任意元素设置为弹性布局，弹性布局会对其内部的子元素产生影响：
（1）.块级元素不再单独占据一行。
（2）.如果块级元素没有显式规定宽度，也不会横向铺满父元素。
（3）.float、clear和vertical-align属性会失效。
-----------------------------------------------------------------
1.(盒子方向)flex-direction:row|row-reverse|column|column-reverse|initial|inherit;
（1）.row：默认值，主轴是水平的，起始位置在左侧，项目从左到右排列。
（2）.row-reverse：主轴是水平的，起始位置在右侧，项目从右到左排列。
（3）.column：主轴是垂直的，起始位置在顶端，项目垂直显示，从上到下。
（4）.column-reverse：主轴是垂直的，起始位置在底部，项目垂直显示，从下到上。
（5）.initial：项目默认方式显示，可以参阅CSS initial 属性一章节。
（6）.inherit：从父元素继承该属性。
-----------------------------------------------------------------
2.(属性规定项目是否拆行或拆列)flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;
（1）.nowrap：默认值，规定容器中的项目不会拆行或者拆列显示。
（2）.wrap：规定容器中的项目在需要的时候自动进行拆行或者拆列显示。
（3）.wrap-reverse：规定容器中的项目在需要的时候自动进行拆行或者拆列显示，但顺序相反。
（4）.initial：规定容器中的项目一默认方式显示，可以参阅CSS initial 属性一章节。
（5）.inherit：从父元素继承该属性。
-----------------------------------------------------------------
(是1,2的结合写法)flex-flow: flex-direction flex-wrap|initial|inherit;
flex-direction flex-wrap的位置可以直接写成他们的属性值
-----------------------------------------------------------------
3.(它用于规定容器元素中的项目如何去分配主轴方向项目之间与以及周围的空间。)
justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;
（1）.flex-start：默认值，规定项目位于容器主轴的起始位置。
（2）.flex-end：规定项目位于容器主轴的结束位置。
（3）.center：规定项目位于容器主轴的中间。
（4）.space-between：规定项目在主轴的两端对齐。
（5）.space-around：规定容器中项目两侧都保留相等的空间。
-----------------------------------------------------------------
4.(align-items和align-content有相同的功能，不过不同点是它是用来让每一个单行的容器居中而不是让整个容器居中。)
align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;
（1）.stretch：默认值，弹性布局容器中的项目会在交叉轴方向拉伸以适应容器。
（2）.center：规定弹性布局容器中的项目在交叉轴方向上居中对齐。
（3）.flex-start：规定弹性布局容器中的项目交叉轴起始位置对齐。
（4）.flex-end：规定弹性布局容器中的项目交叉轴结束位置对齐。
（5）.baseline：规定弹性布局容器中的项目第一行文字的基线对齐。
（6）.initial：规定弹性布局容器中的项目默认方式显示，参阅CSS initial 属性一章节。
（7）.inherit：从父元素继承该属性。
------------------------------------------------------------------
5.(align-content属性只适用于多行的flex容器，并且当交叉轴上有多余空间使flex容器内的flex线对齐。)
 align-content: stretch|center|flex-start|flex-end|space-between|space-around
（1）.stretch：默认值，规定行被拉伸以适应交叉轴容器的尺寸，其中的项目随之被拉伸。
（2）.center：规定容器中的行在容器交叉轴上居中对齐。
（3）.flex-start：规定容器中的行在容器交叉轴上起始位置对齐。
（4）.flex-end：规定容器中的行在容器交叉轴上结束位置对齐。
（5）.space-between：规定容器中的行在容器交叉轴上两端对齐，行之间的间隔都相等。
（6）.space-around:每规定容器中的行两侧的间隔相等。所以行之间的间隔比行与容器边缘的间隔大一倍。
===============================================================================
##区别align-items和 align-content
此时可以看到item（子元素）的宽度相加大于container（父元素）的宽度，容器中flex-wrap属性值是wrap即会造成换行，换行后就会有多个crossAxis轴,这个时候就需要用到align-content，先看看结果。
反之如果width相加小于container的宽度，那么就需要用align-items。align-content则不会生效。在不生效的情况下，两个属性都会去默认值stretch。
================================================================================
--------------------------------------------------------------------------------
6.(order: number|initial|inherit);
（1）.number:默认值是 0。规定Flex项目的顺序(就是设置每个色块的位置)。
（2）.initial：Flex项目默认方式显示，可以参阅css initial属性一章节。
（3）.inherit:从父元素继承该属性。
--------------------------------------------------------------------------------
7.(flex-grow属性定义项目的放大比例，默认为0，也就是不进行放大。
 如果容器不存在剩余空间，那么也就无法进行放大操作。【伸】)
flex-grow: number|initial|inherit;
（1）.number：一个数值，默认为0，用于规定子项目的放大比例，这个比例要和其他项目对比进行确定。
（2）.initial：项目以默认方式显示，具体参阅CSS initial 属性一章节。
（3）.inherit：从父元素继承该属性。
-----------------------------------------------------------------------------------
8.(flex-shrink属性则体现了弹性布局"屈"的一面，可以让项目尺寸收缩。)
 此属性规定容器中项目在主轴上的缩小比例，默认值为1。
 需要特别注意如下几点：（1）.此属性应用于容器中的项目之上。（2）.必须容器主轴上的尺寸小于项目尺寸，才有可能缩小。
 （3）.属性值为0，表示项目部缩小。（4）.必须应用弹性布局环境中，否则无效。

 flex-shrink: number|initial|inherit;
 （1）.number：默认值是 1，容器中的项目相对于其他项目的搜索比率。
 （2）.initial：容器中的项目默认方式显示，可以参阅CSS initial 属性一章节。
 （3）.inherit：从父元素继承该属性。
         #main div:nth-of-type(1) {flex-grow: 1;}
         #main div:nth-of-type(2) {flex-grow: 3;}
         #main div:nth-of-type(3) {flex-grow: 1;}
         #main div:nth-of-type(4) {flex-grow: 1;}
         #main div:nth-of-type(5) {flex-grow: 1;}
         注意：1代表是扩大为原来的1倍，3代表为扩大为原来的3倍
 ------------------------------------------------------------------------------------
 （1）.此属性应用于容器中的项目之上。
 （2）.必须容器主轴上的尺寸小于项目尺寸，才有可能缩小。
 （3）.属性值为0，表示项目部缩小。
 （4）.必须应用弹性布局环境中，否则无效。
 flex-shrink: number|initial|inherit;
 （1）.number：默认值是 1，容器中的项目相对于其他项目的搜索比率。
 （2）.initial：容器中的项目默认方式显示，可以参阅CSS initial 属性一章节。
 （3）.inherit：从父元素继承该属性。
         #main div {
             flex-shrink:1;
             flex-basis:100px;
         }
         #main div:nth-of-type(2) {flex-shrink:3;}
         注意:1代表为缩小为原来的1倍，3代表为缩小为原来的3倍
 -----------------------------------------------------------------------------------------
 (此属性用于规定在分配多余空间之前，项目占据的主轴空间，也就是为项目设定一个最初的基准尺寸。
 既然是一个基准尺寸，那么也就意味着可以在这个尺寸基础上进行扩展或者收缩)
 9(flex-basis: number|auto|initial|inherit;)
 （1）.number：长度单位或者百分比，规定flex项目的初始长度。
 （2）.auto：默认值，长度等于flex项目本身长度，如果项目未指定长度，根据内容决定。
 （3）.initial：flex项目默认方式显示，可以参阅CSS initial属性一章节。
 （4）.inherit：从父元素继承该属性。
 --------------------------------------------------------------------------------
(此属性是flex-grow、flex-shrink和flex-basis属性的复合写法。
 默认属性值为0 1 auto。
 如果元素不是Flex项目，则此属性不起作用。)
 flex: flex-grow flex-shrink flex-basis|auto|initial|inherit;
 （1）.auto:与1 1 auto相同。
 （2）.none:与0 0 auto相同。
 （1）.initial：Flex项目默认方式显示，可以参阅CSS initial 属性一章节。
 （2）.inherit:从父元素继承该属性。
 -----------------------------------------------------------------------------------------------
 只要掌握了align-items属性，那么基本就掌握align-self属性的用法。
 两个属性的主要异同点如下：
 （1）.两个属性都是用来规定项目在所在行中，容器交叉轴方向上的对齐方式。
 （2）.align-items属性在容器元素上设置，作用于所有项目，是面的设置。
 （3）.align-self属性在项目元素上设置，作用于当前项目，是点的设置。
 align-self属性用于设置单个项目在行中容器交叉轴方向的对齐方式。
 上文概念阐述中，多次提到"行"的概念，实质上此属性规定的是项目在行中的对齐方式。

 align-self: auto|stretch|center|flex-start|flex-end|baseline
（1）.auto：默认值，继承弹性容器的align-items属性值，如果弹性容器未设置align-items，默认值为stretch。
（2）.stretch：规定项目被拉伸以使用容器在交叉轴上的尺寸。
（3）.center：规定项目在行中交叉轴方向居中对齐。
（4）.flex-start：规定项目在行中交叉轴方向起始位置对齐。
（5）.flex-end：规定项目在行中交叉轴方向结束位置对齐。
（6）.baseline：规定项目在所在行中基线对齐。































