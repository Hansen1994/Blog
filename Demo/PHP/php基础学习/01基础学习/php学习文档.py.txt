Integer（整型）
String（字符串）
Float（浮点型）,
Boolean（布尔型）
Array（数组）
Object（对象）
NULL（空值）
=====================
empty()可以向括号中间传入一个变量。这个变量的值如果为false或者为null的话，返回true。
===================================================================================
isset()可以向括号中间传入一个或者多个变量，变量与变量间用逗号分开。只要有有一个变量为null，则返回false。否则，则返回true。
=========================================================================================================================
并置运算符.(点）用于把两个字符串值连接起来。
===========================================
PHP strlen() 函数
有时知道字符串值的长度是很有用的。
strlen() 函数返回字符串的长度（字符数）。
注意：在UTF-8下 strlen  把中文字符算成 3 个字节，英文，空格，符号占 1 个字节。
==============================================================================
PHP strpos() 函数
strpos() 函数用于在字符串内查找一个字符或一段指定的文本。
如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。
实例
下面的实例在字符串 "Hello world!" 中查找文本 "world"：
<?php
 echo strpos("Hello world!","world");
 ?>
提示：在上面的实例中，字符串 "world" 的位置是 6。之所以是 6 而不是 7 的原因是，字符串中第一个字符的位置是 0，而不是 1。
========================================================================================================================
PHP常量
常量可以理解为：永久不变的值
常量值被定义后，在脚本的其他任何地方都不能被改变
PHP 常量
常量是单个值的标识符（名称）。在脚本中无法改变该值。
有效的常量名以字符或下划线开头（常量名称前面没有 $ 符号）。
常量名可以小写，但是通常大写
注释：与变量不同，常量贯穿整个脚本是自动全局的。
===============================================
PHP if...else...elseif 语句
PHP Switch 语句
===============================================
数组
<?php
 $arr=[            //用[]创建数组
     'name'=>'Tom',
     'age'=>'18',
     'gender'=>'male'
 ];
 echo "<pre>";
 var_dump($arr) ;
 echo"</pre>"
 ?>
我们通过实验知道：
1.    声明关联数组是 键名 => 值
2.    在关联数组可以有索引数组的元素
===================================================
count($变量) 函数用于返回数组的长度（元素数）：
===================================================
用for循环遍历索引数组
遍历二字，从字面解释就是一个接一个全读访问一次，显示出来。
因为for循环是一个单纯的计数型循环，而索引数组的下标为整型的数值。因此，我们可以通过for循环来遍历索引数组。
====================================================
?php
 $arr=[
     'name'=>'Tom',
     'age'=>'18',
     'gender'=>'male'
 ];
 foreach($arr as $key=>$value){
     echo $key.": ".$value."<br />";
 
 };
 ?>
通过上面的运行结果我们得出下面的结果：
1.    每次循环的时候，把下标赋值给了变量$key，把值的变量赋值给了变量$value
2.    循环一次读一次键和值。读到最后，发现没有可以读取的数组元素后，停止循环遍历数据。
注意：$key 和$value并不是变量名必须得为这两个名字。你命名为其他的也可以，如 $kai => $wen是一样的。 你要清楚键赋值
给了哪个变量，值赋值给了另外的哪个变量。
通过foreach遍历连续的索引数组，如下例：
<?php
 header("Content-type:text/html;charset=utf-8");    //设置编码
 $data = array(
     0 => '中国',
     100 => '美国',
     20 => '韩国',
     300 => '德国',
 );
  
 foreach($data as $k => $v){
 
     echo $k . '------' . $v .'<br />';
 
 }
 ?>
=========================================================================
数组排序函数
在本章中，我们将一一介绍下列 PHP 数组排序函数：
·   sort() - 对数组进行升序排列
·   rsort() - 对数组进行降序排列
·   asort() - 根据关联数组的值，对数组进行升序排列
·   ksort() - 根据关联数组的键，对数组进行升序排列
·   arsort() - 根据关联数组的值，对数组进行降序排列
·   krsort() - 根据关联数组的键，对数组进行降序排列
==============================================================================
PHP 循环 - While 循环
=================================================================================
PHP 超级全局变量列表:
·   $GLOBALS
·   $_SERVER
$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。
实例
以下实例中展示了如何使用$_SERVER中的元素:
<?php
 echo $_SERVER['PHP_SELF'];
 echo "<br>";
 echo $_SERVER['SERVER_NAME'];
 echo "<br>";
 echo $_SERVER['HTTP_HOST'];
 echo "<br>";
 echo $_SERVER['HTTP_REFERER'];
 echo "<br>";
 echo $_SERVER['HTTP_USER_AGENT'];
 echo "<br>";
 echo $_SERVER['SCRIPT_NAME'];
 ?>
·   $_REQUEST
·   $_POST
·   $_GET
·   $_FILES
·   $_ENV
·   $_COOKIE
·   $_SESSION
本章节我们将讲解几个常用的超级全局变量,其余变量我们在接下来几个章节会介绍到

==========================================================================
在用户提交该表单时，我们还要做两件事：
1.   （通过 PHP trim() 函数）去除用户输入数据中不必要的字符（多余的空格、制表符、换行）
2.   （通过 PHP stripslashes() 函数）删除用户输入数据中的反斜杠（\）
接下来我们创建一个检查函数（相比一遍遍地写代码，这样效率更好）。
我们把函数命名为 test_input()。
现在，我们能够通过 test_input() 函数检查每个 $_POST 变量，脚本是这样的：

=====================================================================

action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>"
一种xss的保护机制
$_SERVER["REQUEST_METHOD"]来检测表单是否被提交 。如果 REQUEST_METHOD 是 POST, 表单将被提交 - 数据将被验证。如果表单未提交将跳过验证并显示空白。























